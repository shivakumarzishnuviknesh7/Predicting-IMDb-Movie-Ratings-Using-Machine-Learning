# -*- coding: utf-8 -*-
"""Predicting IMDb Movie Ratings Using Machine Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10Pw2FxyFI3X_WWLVtHIwgeXCJ7VnC07m
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import pearsonr, ttest_ind
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import plotly.express as px
import plotly.graph_objs as go
from plotly.subplots import make_subplots

# Load the dataset
df = pd.read_csv('imdb-movies-dataset.csv')

# Data Cleaning
df['Rating'] = pd.to_numeric(df['Rating'], errors='coerce')
df['Metascore'] = pd.to_numeric(df['Metascore'], errors='coerce')
df['Votes'] = df['Votes'].str.replace(',', '').astype(float)
df.dropna(subset=['Rating', 'Metascore'], inplace=True)

# Select numeric columns only
numeric_cols = df.select_dtypes(include=[np.number])

# Exploratory Data Analysis (EDA)
print("Dataset Information:")
print(df.info())

print("\nDescriptive Statistics:")
print(df.describe())

# Advanced Visualizations
# Correlation heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(numeric_cols.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix of Movie Features')
plt.show()

# Pairplot for selected features
sns.pairplot(numeric_cols[['Rating', 'Metascore', 'Duration (min)', 'Votes']])
plt.show()

# Boxplot of ratings by genre
df['Genre'] = df['Genre'].str.split(', ')
genres_exploded = df.explode('Genre')
plt.figure(figsize=(16, 10))
sns.boxplot(data=genres_exploded, x='Rating', y='Genre')
plt.title('Boxplot of IMDb Ratings by Genre')
plt.xlabel('IMDb Rating')
plt.ylabel('Genre')
plt.grid(True)
plt.show()

# Interactive Plotly Visualizations
# Scatter plot for Rating vs. Metascore
fig = px.scatter(df, x='Rating', y='Metascore', title='IMDb Rating vs. Metascore')
fig.show()

# Hypothesis Testing: Higher-rated movies tend to have higher metascores
pearson_corr, p_value = pearsonr(df['Rating'], df['Metascore'])
print(f"Pearson Correlation Coefficient: {pearson_corr}")
print(f"P-value: {p_value}")

# T-test for genre impact on ratings (example: Action vs. Drama)
action_ratings = genres_exploded[genres_exploded['Genre'] == 'Action']['Rating']
drama_ratings = genres_exploded[genres_exploded['Genre'] == 'Drama']['Rating']
t_stat, t_p_value = ttest_ind(action_ratings.dropna(), drama_ratings.dropna())
print(f"T-test between Action and Drama ratings: T-stat={t_stat}, P-value={t_p_value}")

# Predictive Modeling
# Prepare data
features = numeric_cols[['Duration (min)', 'Votes', 'Metascore']]
target = numeric_cols['Rating']

# Split data
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Train model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

# Feature importance
feature_importances = model.feature_importances_
features_list = features.columns
importance_df = pd.DataFrame({'Feature': features_list, 'Importance': feature_importances}).sort_values(by='Importance', ascending=False)

# Plot feature importance
plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=importance_df)
plt.title('Feature Importance in Predicting IMDb Ratings')
plt.show()

# Interactive Dashboard with Plotly
# Create subplots
fig = make_subplots(rows=1, cols=2, subplot_titles=('Rating vs. Metascore', 'Feature Importance'))

# Add scatter plot
scatter = go.Scatter(x=df['Rating'], y=df['Metascore'], mode='markers')
fig.add_trace(scatter, row=1, col=1)

# Add bar plot
bar = go.Bar(x=importance_df['Importance'], y=importance_df['Feature'], orientation='h')
fig.add_trace(bar, row=1, col=2)

# Update layout
fig.update_layout(title_text='Interactive Dashboard')
fig.show()

# Function to predict single value
def predict_single_value(duration, votes, metascore):
    input_data = np.array([[duration, votes, metascore]])
    predicted_rating = model.predict(input_data)
    return predicted_rating[0]

# Example single value prediction
duration = 120  # example duration in minutes
votes = 150000  # example votes
metascore = 75  # example metascore

predicted_rating = predict_single_value(duration, votes, metascore)
print(f"Predicted IMDb Rating: {predicted_rating}")